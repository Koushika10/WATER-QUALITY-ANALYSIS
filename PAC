# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HFFrFtIp3VBo3uWQo-nlxn_zmHO86ey9
"""

import numpy as np # linear algebra
import pandas as pd

pip install pycaret

"""# Setting Up"""

try:
    import pycaret
except:
    !pip install pycaret-nightly

try:
    import missingno
except:
    !pip install missingno

try:
    import interpret
except:
    !pip install interpret

import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

from sklearn import model_selection
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score
from sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.impute import KNNImputer

import warnings
warnings.filterwarnings(action='ignore')

import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

water_df = pd.read_csv("/content/water_potability nan mu.csv")

water_df.info()

water_df.head().T.style.set_properties(**{'background-color': 'blue',
                           'color': 'white',
                           'border-color': 'white'})

"""# Checking Missing Values"""

import missingno as msno
msno.matrix(water_df,color=(0.0, 0.0, 0.9))

"""Observation:

There are missing values for ph, sulfate, and trihalomethanes.

# Handling Missing Values
"""

water_df.dropna(axis=0,inplace=True)

pip uninstall scipy

"""# Doing Anomaly Detection
We want to find outliers in the dataset through anomaly detection. When solving the water portability problem, it seems right to remove outliers. This is because there should not be outliers in the dataset related to life.
"""

from pycaret.anomaly import *

pycaret.anomaly.setup(
    data=water_df)

"""Principal Component Analysis (PCA) is a widely used dimensionality reduction technique and, when applied to anomaly detection, it becomes a powerful tool for identifying unusual patterns or outliers in datasets. In anomaly detection using PCA, the primary goal is to transform the data into a lower-dimensional space while retaining as much variance as possible. Anomalies can then be detected by identifying data points that deviate significantly from the expected distribution in this reduced space."""

pca = pycaret.anomaly.create_model('pca')

pca_df = pycaret.anomaly.assign_model(pca)

abnormal_data = pca_df[pca_df.Anomaly == 1].sort_values(by='Anomaly_Score', ascending=False)

abnormal_data.head(10).style.set_properties(**{'background-color': 'blue',
                           'color': 'white',
                           'border-color': 'white'})
print("the size of anomaly = ",len(abnormal_data))
abnormal_data.head(10).style.set_properties(**{'background-color': 'blue',
                           'color': 'white',
                           'border-color': 'white'})

"""# Observation:

There are 110 anomaly data.
If you look at the Top 10 anamaly dates, there are many data judged to have potability.
"""

colors = ['gold', 'mediumturquoise']
labels = ['No','Yes']
values = abnormal_data['Potability'].value_counts()/abnormal_data['Potability'].shape[0]

fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
fig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))
fig.update_layout(
    title_text="Anomaly Potability",
    title_font_color="white",
    legend_title_font_color="yellow",
    paper_bgcolor="blue",
    plot_bgcolor='blue',
    font_color="white",
)
fig.show()

"""Observation:

Looking at the target of data judged as anomaly, there are more cases judged as potability.
What can be predicted from this is that there are many cases in this dataset where undrinkable water is judged to be drinkable.
"""